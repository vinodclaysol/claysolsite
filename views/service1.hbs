{{>nav}}

<div class="qmlrqtpage app-wrapper" style="padding-top: 130px;">
    <div class="side-banner img-responsive">
        <canvas class="connecting-dots"></canvas>
        <div class="sr-head">
            <h2>Q<span>t</span>/QML Service</h2>
            <p>Does Qt have a partner in India for design and architectural framework?</p>
        </div>
    </div>
    <div class="page-content">
        <div class="page-content-container var1">
            <div class="var1-brief">
                <p class="text-justify">Qt is the de-facto standard for implementing a rich Graphical User Interface on desktop and embedded platforms.
                    Qt is a cross platform framework and runs on most embedded platforms including Linux, Windows Embedded and
                    custom RTOS such as QNX and VxWorks. Qt uses standard C++ with extensions including signals and slots that
                    simplifies handling of events, and this helps in development of both GUI and server applications which receive
                    their own set of event information and should process them accordingly. Qt supports many compilers, including
                    the GCC C++ compiler and the Visual Studio suite. Qt also provides Qt Quick, that includes a declarative
                    scripting language called QML that allows using JavaScript to provide the logic. With Qt Quick, rapid
                    application development for mobile devices became possible, although logic can be written with native code as
                    well to achieve the best possible performance. Qt can be used in several other programming languages
                    via language bindings. It runs on the major desktop platforms and some of the mobile platforms. It has
                    extensive internationalization support. Non-GUI features include SQL database access, XML parsing, JSON parsing,
                    thread management and network support.</p>
            </div>
            <div class="var-img">
                <img src="/images/qt-2.png" class="img-responsive">
            </div>
            <div class="var2-brief">
                <p class="text-justify">Claysol has many years of experince in the Qt platform right from the initial stage.
                    We closely work with Digia, who currently owns and manages the Qt Framework. We have developed Qt based applications
                    for Set Top Boxes, Automotive Consoles, Industrial Controls and EDA Tools to name a few. Our experts also conduct training
                    on the Qt platform to leading organizations.</p>
            </div>
        </div>
    </div>
</div> 
<script>
    var canvasDots = function() {
    var canvas = document.querySelector('canvas'),
        ctx = canvas.getContext('2d'),
        colorDot = '#21be2b',
        color = '#21be2b';
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    canvas.style.display = 'block';
    ctx.fillStyle = colorDot;
    ctx.lineWidth = .2;
    ctx.strokeStyle = color;

    var mousePosition = {
        x: 30 * canvas.width / 100,
        y: 30 * canvas.height / 100
    };

    var dots = {
        nb: 300,
        distance: 60,
        d_radius: 100,
        array: []
    };

    function Dot(){
        this.x = Math.random() * canvas.width;
        this.y = Math.random() * canvas.height;

        this.vx = -.5 + Math.random();
        this.vy = -.5 + Math.random();

        this.radius = Math.random();
    }

    Dot.prototype = {
        create: function(){
            ctx.beginPath();
            ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);
            ctx.fill();
        },

        animate: function(){
            for(i = 0; i < dots.nb; i++){

                var dot = dots.array[i];

                if(dot.y < 0 || dot.y > canvas.height){
                    dot.vx = dot.vx;
                    dot.vy = - dot.vy;
                }
                else if(dot.x < 0 || dot.x > canvas.width){
                    dot.vx = - dot.vx;
                    dot.vy = dot.vy;
                }
                dot.x += dot.vx;
                dot.y += dot.vy;
            }
        },

        line: function(){
            for(i = 0; i < dots.nb; i++){
                for(j = 0; j < dots.nb; j++){
                    i_dot = dots.array[i];
                    j_dot = dots.array[j];

                    if((i_dot.x - j_dot.x) < dots.distance && (i_dot.y - j_dot.y) < dots.distance && (i_dot.x - j_dot.x) > - dots.distance && (i_dot.y - j_dot.y) > - dots.distance){
                        if((i_dot.x - mousePosition.x) < dots.d_radius && (i_dot.y - mousePosition.y) < dots.d_radius && (i_dot.x - mousePosition.x) > - dots.d_radius && (i_dot.y - mousePosition.y) > - dots.d_radius){
                            ctx.beginPath();
                            ctx.moveTo(i_dot.x, i_dot.y);
                            ctx.lineTo(j_dot.x, j_dot.y);
                            ctx.stroke();
                            ctx.closePath();
                        }
                    }
                }
            }
        }
    };

    function createDots(){
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        for(i = 0; i < dots.nb; i++){
            dots.array.push(new Dot());
            dot = dots.array[i];

            dot.create();
        }

        dot.line();
        dot.animate();
    }

    window.onmousemove = function(parameter) {
        mousePosition.x = parameter.pageX;
        mousePosition.y = parameter.pageY;
    }

    mousePosition.x = window.innerWidth / 2;
    mousePosition.y = window.innerHeight / 2;

    setInterval(createDots, 1000/30);
};

window.onload = function() {
    canvasDots();
};
</script>